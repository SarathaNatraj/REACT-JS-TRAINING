"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessorSpy = exports.AccessorInspector = exports.LogAccessorInspector = void 0;
require("reflect-metadata");
function LogAccessorInspector(target, propertyKey, descriptor) {
    console.log(AccessorInspector(target, propertyKey, descriptor));
}
exports.LogAccessorInspector = LogAccessorInspector;
function AccessorInspector(target, propertyKey, descriptor) {
    return {
        target, propertyKey, descriptor,
        ownKeys: Reflect.ownKeys(target),
        design: {
            type: Reflect.getMetadata("design:type", target, propertyKey),
            paramtypes: Reflect.getMetadata("design:paramtypes", target, propertyKey),
            returntype: Reflect.getMetadata("design:returntype", target, propertyKey)
        }
    };
}
exports.AccessorInspector = AccessorInspector;
function AccessorSpy() {
    return function (target, propertyKey, descriptor) {
        const originals = {
            get: descriptor.get,
            set: descriptor.set
        };
        if (originals.get) {
            descriptor.get = function () {
                const ret = originals.get.call(this);
                console.log(`AccessorSpy get ${String(propertyKey)}`, ret);
                return ret;
            };
        }
        if (originals.set) {
            descriptor.set = function (newval) {
                console.log(`AccessorSpy set ${String(propertyKey)}`, newval);
                originals.set.call(this, newval);
            };
        }
    };
}
exports.AccessorSpy = AccessorSpy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWNjZXNzb3JJbnNwZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvQWNjZXNzb3JJbnNwZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNEJBQTBCO0FBRzFCLFNBQWdCLG9CQUFvQixDQUFDLE1BQVcsRUFDNUMsV0FBbUIsRUFDbkIsVUFBOEI7SUFFOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUxELG9EQUtDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsTUFBVyxFQUN6QyxXQUFtQixFQUNuQixVQUE4QjtJQUU5QixPQUFPO1FBQ0gsTUFBTSxFQUFFLFdBQVcsRUFBRSxVQUFVO1FBQy9CLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNoQyxNQUFNLEVBQUU7WUFDSixJQUFJLEVBQ0EsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQ3JCLE1BQU0sRUFBRSxXQUFXLENBQUM7WUFDcEMsVUFBVSxFQUNOLE9BQU8sQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQzNCLE1BQU0sRUFBRSxXQUFXLENBQUM7WUFDcEMsVUFBVSxFQUNOLE9BQU8sQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQzNCLE1BQU0sRUFBRSxXQUFXLENBQUM7U0FDdkM7S0FDSixDQUFDO0FBQ04sQ0FBQztBQW5CRCw4Q0FtQkM7QUFFRCxTQUFnQixXQUFXO0lBQ3ZCLE9BQU8sVUFBVSxNQUFjLEVBQy9CLFdBQW1CLEVBQ25CLFVBQThCO1FBRTFCLE1BQU0sU0FBUyxHQUFHO1lBQ2QsR0FBRyxFQUFFLFVBQVUsQ0FBQyxHQUFHO1lBQ25CLEdBQUcsRUFBRSxVQUFVLENBQUMsR0FBRztTQUN0QixDQUFDO1FBQ0YsSUFBSSxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2YsVUFBVSxDQUFDLEdBQUcsR0FBRztnQkFDYixNQUFNLEdBQUcsR0FBTSxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQzNELE9BQU8sR0FBRyxDQUFDO1lBQ2YsQ0FBQyxDQUFDO1NBQ0w7UUFDRCxJQUFJLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDZixVQUFVLENBQUMsR0FBRyxHQUFHLFVBQVMsTUFBUztnQkFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQzlELFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUM7U0FDTDtJQUNMLENBQUMsQ0FBQTtBQUNMLENBQUM7QUF2QkQsa0NBdUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdyZWZsZWN0LW1ldGFkYXRhJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAndXRpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBMb2dBY2Nlc3Nvckluc3BlY3Rvcih0YXJnZXQ6IGFueSxcbiAgICBwcm9wZXJ0eUtleTogc3RyaW5nLFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgIFxuICAgIGNvbnNvbGUubG9nKEFjY2Vzc29ySW5zcGVjdG9yKHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEFjY2Vzc29ySW5zcGVjdG9yKHRhcmdldDogYW55LFxuICAgIHByb3BlcnR5S2V5OiBzdHJpbmcsXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yLFxuICAgICAgICBvd25LZXlzOiBSZWZsZWN0Lm93bktleXModGFyZ2V0KSxcbiAgICAgICAgZGVzaWduOiB7XG4gICAgICAgICAgICB0eXBlOiBcbiAgICAgICAgICAgICAgICBSZWZsZWN0LmdldE1ldGFkYXRhKFwiZGVzaWduOnR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQsIHByb3BlcnR5S2V5KSxcbiAgICAgICAgICAgIHBhcmFtdHlwZXM6XG4gICAgICAgICAgICAgICAgUmVmbGVjdC5nZXRNZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LCBwcm9wZXJ0eUtleSksXG4gICAgICAgICAgICByZXR1cm50eXBlOlxuICAgICAgICAgICAgICAgIFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJkZXNpZ246cmV0dXJudHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCwgcHJvcGVydHlLZXkpXG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQWNjZXNzb3JTcHk8VD4oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IE9iamVjdCxcbiAgICBwcm9wZXJ0eUtleTogc3RyaW5nLFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcikge1xuXG4gICAgICAgIGNvbnN0IG9yaWdpbmFscyA9IHtcbiAgICAgICAgICAgIGdldDogZGVzY3JpcHRvci5nZXQsXG4gICAgICAgICAgICBzZXQ6IGRlc2NyaXB0b3Iuc2V0XG4gICAgICAgIH07XG4gICAgICAgIGlmIChvcmlnaW5hbHMuZ2V0KSB7XG4gICAgICAgICAgICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uICgpOiBUIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXQ6IFQgPSBvcmlnaW5hbHMuZ2V0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEFjY2Vzc29yU3B5IGdldCAke1N0cmluZyhwcm9wZXJ0eUtleSl9YCwgcmV0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JpZ2luYWxzLnNldCkge1xuICAgICAgICAgICAgZGVzY3JpcHRvci5zZXQgPSBmdW5jdGlvbihuZXd2YWw6IFQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQWNjZXNzb3JTcHkgc2V0ICR7U3RyaW5nKHByb3BlcnR5S2V5KX1gLCBuZXd2YWwpO1xuICAgICAgICAgICAgICAgIG9yaWdpbmFscy5zZXQuY2FsbCh0aGlzLCBuZXd2YWwpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==