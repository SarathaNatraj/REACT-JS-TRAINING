import 'reflect-metadata';
export declare function LogClassInspector(constructor: Function): void;
export declare function ClassInspector(constructor: Function): {
    constructor: Function;
    extensible: boolean;
    frozen: boolean;
    sealed: boolean;
    values: any[];
    properties: {
        apply: TypedPropertyDescriptor<(this: Function, thisArg: any, argArray?: any) => any>;
        call: TypedPropertyDescriptor<(this: Function, thisArg: any, ...argArray: any[]) => any>;
        bind: TypedPropertyDescriptor<(this: Function, thisArg: any, ...argArray: any[]) => any>;
        toString: TypedPropertyDescriptor<() => string>;
        prototype: TypedPropertyDescriptor<any>;
        readonly length: TypedPropertyDescriptor<number>;
        arguments: TypedPropertyDescriptor<any>;
        caller: TypedPropertyDescriptor<Function>;
        readonly name: TypedPropertyDescriptor<string>;
        [Symbol.hasInstance]: TypedPropertyDescriptor<(value: any) => boolean>;
    } & {
        [x: string]: PropertyDescriptor;
    };
    ownKeys: (string | symbol)[];
    metadataKeys: any[];
    metadataMembers: {};
    prototypeKeys: (string | symbol)[];
    prototypeMembers: {};
};
//# sourceMappingURL=ClassInspector.d.ts.map