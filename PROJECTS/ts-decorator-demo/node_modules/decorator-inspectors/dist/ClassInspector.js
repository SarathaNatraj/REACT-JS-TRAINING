"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassInspector = exports.LogClassInspector = void 0;
require("reflect-metadata");
const Utils_1 = require("./Utils");
function LogClassInspector(constructor) {
    console.log(ClassInspector(constructor));
}
exports.LogClassInspector = LogClassInspector;
function ClassInspector(constructor) {
    const ret = {
        constructor,
        extensible: Object.isExtensible(constructor),
        frozen: Object.isFrozen(constructor),
        sealed: Object.isSealed(constructor),
        values: Object.values(constructor),
        properties: Object.getOwnPropertyDescriptors(constructor),
        ownKeys: Reflect.ownKeys(constructor),
        metadataKeys: Reflect.getMetadataKeys(constructor),
        metadataMembers: {},
        prototypeKeys: Reflect.ownKeys(constructor.prototype),
        prototypeMembers: {}
    };
    for (const key of Reflect.ownKeys(constructor.prototype)) {
        if (typeof constructor.prototype[key] === 'function') {
            ret.prototypeMembers[key] = (0, Utils_1.functionData)(constructor.prototype[key]);
        }
        else {
            ret.prototypeMembers[key] = constructor.prototype[key];
        }
    }
    for (const key of Reflect.getMetadataKeys(constructor)) {
        const obj = Reflect.getMetadata(key, constructor);
        if (typeof obj === 'function') {
            ret.metadataMembers[key] = (0, Utils_1.functionData)(obj);
        } /* else if (Array.isArray(obj)) {
            const toadd = [];
            for (const item of obj) {
                if (typeof item === 'function') {
                    toadd.push(functionData(item));
                } else {
                    toadd.push(item);
                }
            }
            ret.metadataMembers[key] = toadd;
        } */
        else {
            ret.metadataMembers[key] = obj;
        }
    }
    return ret;
}
exports.ClassInspector = ClassInspector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xhc3NJbnNwZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvQ2xhc3NJbnNwZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNEJBQTBCO0FBRTFCLG1DQUF1QztBQUV2QyxTQUFnQixpQkFBaUIsQ0FBQyxXQUFxQjtJQUNuRCxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFGRCw4Q0FFQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxXQUFxQjtJQUNoRCxNQUFNLEdBQUcsR0FBRztRQUNSLFdBQVc7UUFDWCxVQUFVLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFDNUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUNwQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFDbEMsVUFBVSxFQUFFLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxXQUFXLENBQUM7UUFDekQsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQ3JDLFlBQVksRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQztRQUNsRCxlQUFlLEVBQUUsRUFBRTtRQUNuQixhQUFhLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBQ3JELGdCQUFnQixFQUFFLEVBQUU7S0FDdkIsQ0FBQztJQUNGLEtBQUssTUFBTSxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDdEQsSUFBSSxPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssVUFBVSxFQUFFO1lBQ2xELEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFBLG9CQUFZLEVBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ3hFO2FBQU07WUFDSCxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxRDtLQUNKO0lBQ0QsS0FBSyxNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1FBQ3BELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2xELElBQUksT0FBTyxHQUFHLEtBQUssVUFBVSxFQUFFO1lBQzNCLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBQSxvQkFBWSxFQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2hELENBQUM7Ozs7Ozs7Ozs7WUFVRTthQUFNO1lBQ04sR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7U0FDbEM7S0FDSjtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQXhDRCx3Q0F3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCB7IGZ1bmN0aW9uRGF0YSB9IGZyb20gJy4vVXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gTG9nQ2xhc3NJbnNwZWN0b3IoY29uc3RydWN0b3I6IEZ1bmN0aW9uKSB7XG4gICAgY29uc29sZS5sb2coQ2xhc3NJbnNwZWN0b3IoY29uc3RydWN0b3IpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENsYXNzSW5zcGVjdG9yKGNvbnN0cnVjdG9yOiBGdW5jdGlvbikge1xuICAgIGNvbnN0IHJldCA9IHtcbiAgICAgICAgY29uc3RydWN0b3IsXG4gICAgICAgIGV4dGVuc2libGU6IE9iamVjdC5pc0V4dGVuc2libGUoY29uc3RydWN0b3IpLFxuICAgICAgICBmcm96ZW46IE9iamVjdC5pc0Zyb3plbihjb25zdHJ1Y3RvciksXG4gICAgICAgIHNlYWxlZDogT2JqZWN0LmlzU2VhbGVkKGNvbnN0cnVjdG9yKSxcbiAgICAgICAgdmFsdWVzOiBPYmplY3QudmFsdWVzKGNvbnN0cnVjdG9yKSxcbiAgICAgICAgcHJvcGVydGllczogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoY29uc3RydWN0b3IpLFxuICAgICAgICBvd25LZXlzOiBSZWZsZWN0Lm93bktleXMoY29uc3RydWN0b3IpLFxuICAgICAgICBtZXRhZGF0YUtleXM6IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKGNvbnN0cnVjdG9yKSxcbiAgICAgICAgbWV0YWRhdGFNZW1iZXJzOiB7fSxcbiAgICAgICAgcHJvdG90eXBlS2V5czogUmVmbGVjdC5vd25LZXlzKGNvbnN0cnVjdG9yLnByb3RvdHlwZSksXG4gICAgICAgIHByb3RvdHlwZU1lbWJlcnM6IHt9XG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBSZWZsZWN0Lm93bktleXMoY29uc3RydWN0b3IucHJvdG90eXBlKSkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbnN0cnVjdG9yLnByb3RvdHlwZVtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXQucHJvdG90eXBlTWVtYmVyc1trZXldID0gZnVuY3Rpb25EYXRhKGNvbnN0cnVjdG9yLnByb3RvdHlwZVtrZXldKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldC5wcm90b3R5cGVNZW1iZXJzW2tleV0gPSBjb25zdHJ1Y3Rvci5wcm90b3R5cGVba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhjb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgY29uc3Qgb2JqID0gUmVmbGVjdC5nZXRNZXRhZGF0YShrZXksIGNvbnN0cnVjdG9yKTtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldC5tZXRhZGF0YU1lbWJlcnNba2V5XSA9IGZ1bmN0aW9uRGF0YShvYmopO1xuICAgICAgICB9IC8qIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgY29uc3QgdG9hZGQgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hZGQucHVzaChmdW5jdGlvbkRhdGEoaXRlbSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYWRkLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0Lm1ldGFkYXRhTWVtYmVyc1trZXldID0gdG9hZGQ7XG4gICAgICAgIH0gKi8gZWxzZSB7XG4gICAgICAgICAgICByZXQubWV0YWRhdGFNZW1iZXJzW2tleV0gPSBvYmo7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbiJdfQ==