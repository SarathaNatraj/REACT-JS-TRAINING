"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MethodInspector = exports.LogMethodInspector = void 0;
require("reflect-metadata");
function LogMethodInspector(target, propertyKey, descriptor) {
    console.log(`LogMethodInspector ${target} ${propertyKey}`, descriptor);
    console.log(MethodInspector(target, propertyKey, descriptor));
}
exports.LogMethodInspector = LogMethodInspector;
function MethodInspector(target, propertyKey, descriptor) {
    return {
        target, propertyKey, descriptor,
        ownKeys: Reflect.ownKeys(target),
        design: {
            type: Reflect.getMetadata("design:type", target, propertyKey),
            paramtypes: Reflect.getMetadata("design:paramtypes", target, propertyKey),
            returntype: Reflect.getMetadata("design:returntype", target, propertyKey)
        }
    };
}
exports.MethodInspector = MethodInspector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0aG9kSW5zcGVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vbGliL01ldGhvZEluc3BlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0QkFBMEI7QUFHMUIsU0FBZ0Isa0JBQWtCLENBQUMsTUFBYyxFQUM3QyxXQUFtQixFQUFFLFVBQThCO0lBRW5ELE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLE1BQU0sSUFBSSxXQUFXLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN2RSxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDbEUsQ0FBQztBQUxELGdEQUtDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLE1BQWMsRUFDMUMsV0FBbUIsRUFBRSxVQUE4QjtJQUVuRCxPQUFPO1FBQ0gsTUFBTSxFQUFFLFdBQVcsRUFBRSxVQUFVO1FBQy9CLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNoQyxNQUFNLEVBQUU7WUFDSixJQUFJLEVBQ0EsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQ3JCLE1BQU0sRUFBRSxXQUFXLENBQUM7WUFDcEMsVUFBVSxFQUNOLE9BQU8sQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQzNCLE1BQU0sRUFBRSxXQUFXLENBQUM7WUFDcEMsVUFBVSxFQUNOLE9BQU8sQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQzNCLE1BQU0sRUFBRSxXQUFXLENBQUM7U0FDdkM7S0FDSixDQUFDO0FBQ04sQ0FBQztBQWxCRCwwQ0FrQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICd1dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIExvZ01ldGhvZEluc3BlY3Rvcih0YXJnZXQ6IE9iamVjdCwgXG4gICAgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XG4gICAgXG4gICAgY29uc29sZS5sb2coYExvZ01ldGhvZEluc3BlY3RvciAke3RhcmdldH0gJHtwcm9wZXJ0eUtleX1gLCBkZXNjcmlwdG9yKTtcbiAgICBjb25zb2xlLmxvZyhNZXRob2RJbnNwZWN0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTWV0aG9kSW5zcGVjdG9yKHRhcmdldDogT2JqZWN0LCBcbiAgICBwcm9wZXJ0eUtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICB0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yLFxuICAgICAgICBvd25LZXlzOiBSZWZsZWN0Lm93bktleXModGFyZ2V0KSxcbiAgICAgICAgZGVzaWduOiB7XG4gICAgICAgICAgICB0eXBlOiBcbiAgICAgICAgICAgICAgICBSZWZsZWN0LmdldE1ldGFkYXRhKFwiZGVzaWduOnR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQsIHByb3BlcnR5S2V5KSxcbiAgICAgICAgICAgIHBhcmFtdHlwZXM6XG4gICAgICAgICAgICAgICAgUmVmbGVjdC5nZXRNZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LCBwcm9wZXJ0eUtleSksXG4gICAgICAgICAgICByZXR1cm50eXBlOlxuICAgICAgICAgICAgICAgIFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJkZXNpZ246cmV0dXJudHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCwgcHJvcGVydHlLZXkpXG4gICAgICAgIH1cbiAgICB9O1xufVxuIl19