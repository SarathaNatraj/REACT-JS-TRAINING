"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyInspector = exports.LogPropertyInspector = void 0;
require("reflect-metadata");
function LogPropertyInspector(target, member) {
    console.log(PropertyInspector(target, member));
}
exports.LogPropertyInspector = LogPropertyInspector;
function PropertyInspector(target, member) {
    return {
        target,
        targetKeys: Object.keys(target),
        member,
        ownKeys: Reflect.ownKeys(target),
        design: {
            type: Reflect.getMetadata("design:type", target, member),
            paramtypes: Reflect.getMetadata("design:paramtypes", target, member),
            returntype: Reflect.getMetadata("design:returntype", target, member)
        }
    };
}
exports.PropertyInspector = PropertyInspector;
// PropertySpy doesn't seem to do what I expected...
// Namely it did not spy on get/set of the property
/* export function PropertySpy<T>() {
    return (target: Object, member: string) => {

        const desc = Object.getOwnPropertyDescriptor(target, member);
        console.log(`PropertySpy descriptor ${member}`, desc);

        if (desc) {
            const originals = {
                get: desc.get, set: desc.set
            };
            if (desc.get) {
                desc.get = () => {
                    const ret = originals.get();
                    console.log(`PropertySpy get ${member}`, ret);
                    return ret;
                };
            }
            if (desc.set) {
                desc.set = (newval: T) => {
                    originals.set(newval);
                    console.log(`PropertySpy set ${member}`, newval);
                }
            }
        } else {
            let value: T;
            Object.defineProperty(target, member, {
                enumerable: true,
                get: () => {
                    console.log(`PropertySpy get ${member}`, value);
                    return value;
                },
                set: (v: T) => {
                    console.log(`PropertySpy set ${member}`, v);
                    value = v;
                }
            });
        }
    }
} */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvcGVydHlJbnNwZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvUHJvcGVydHlJbnNwZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNEJBQTBCO0FBRzFCLFNBQWdCLG9CQUFvQixDQUFDLE1BQWMsRUFBRSxNQUFjO0lBQy9ELE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQUZELG9EQUVDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsTUFBYyxFQUFFLE1BQWM7SUFDNUQsT0FBTztRQUNILE1BQU07UUFDTixVQUFVLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDL0IsTUFBTTtRQUNOLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNoQyxNQUFNLEVBQUU7WUFDSixJQUFJLEVBQ0EsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQ3JCLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDL0IsVUFBVSxFQUNOLE9BQU8sQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQzNCLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDL0IsVUFBVSxFQUNOLE9BQU8sQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQzNCLE1BQU0sRUFBRSxNQUFNLENBQUM7U0FDbEM7S0FDSixDQUFDO0FBQ04sQ0FBQztBQWxCRCw4Q0FrQkM7QUFFRCxvREFBb0Q7QUFDcEQsbURBQW1EO0FBRW5EOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQXNDSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAncmVmbGVjdC1tZXRhZGF0YSc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3V0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gTG9nUHJvcGVydHlJbnNwZWN0b3IodGFyZ2V0OiBPYmplY3QsIG1lbWJlcjogc3RyaW5nKTogYW55IHtcbiAgICBjb25zb2xlLmxvZyhQcm9wZXJ0eUluc3BlY3Rvcih0YXJnZXQsIG1lbWJlcikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUHJvcGVydHlJbnNwZWN0b3IodGFyZ2V0OiBPYmplY3QsIG1lbWJlcjogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YXJnZXQsXG4gICAgICAgIHRhcmdldEtleXM6IE9iamVjdC5rZXlzKHRhcmdldCksXG4gICAgICAgIG1lbWJlcixcbiAgICAgICAgb3duS2V5czogUmVmbGVjdC5vd25LZXlzKHRhcmdldCksXG4gICAgICAgIGRlc2lnbjoge1xuICAgICAgICAgICAgdHlwZTogXG4gICAgICAgICAgICAgICAgUmVmbGVjdC5nZXRNZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LCBtZW1iZXIpLFxuICAgICAgICAgICAgcGFyYW10eXBlczpcbiAgICAgICAgICAgICAgICBSZWZsZWN0LmdldE1ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQsIG1lbWJlciksXG4gICAgICAgICAgICByZXR1cm50eXBlOlxuICAgICAgICAgICAgICAgIFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJkZXNpZ246cmV0dXJudHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCwgbWVtYmVyKVxuICAgICAgICB9XG4gICAgfTtcbn1cblxuLy8gUHJvcGVydHlTcHkgZG9lc24ndCBzZWVtIHRvIGRvIHdoYXQgSSBleHBlY3RlZC4uLlxuLy8gTmFtZWx5IGl0IGRpZCBub3Qgc3B5IG9uIGdldC9zZXQgb2YgdGhlIHByb3BlcnR5XG5cbi8qIGV4cG9ydCBmdW5jdGlvbiBQcm9wZXJ0eVNweTxUPigpIHtcbiAgICByZXR1cm4gKHRhcmdldDogT2JqZWN0LCBtZW1iZXI6IHN0cmluZykgPT4ge1xuXG4gICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgbWVtYmVyKTtcbiAgICAgICAgY29uc29sZS5sb2coYFByb3BlcnR5U3B5IGRlc2NyaXB0b3IgJHttZW1iZXJ9YCwgZGVzYyk7XG5cbiAgICAgICAgaWYgKGRlc2MpIHtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFscyA9IHtcbiAgICAgICAgICAgICAgICBnZXQ6IGRlc2MuZ2V0LCBzZXQ6IGRlc2Muc2V0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgICAgICAgICAgICAgZGVzYy5nZXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJldCA9IG9yaWdpbmFscy5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFByb3BlcnR5U3B5IGdldCAke21lbWJlcn1gLCByZXQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgICAgICAgICAgICBkZXNjLnNldCA9IChuZXd2YWw6IFQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxzLnNldChuZXd2YWwpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgUHJvcGVydHlTcHkgc2V0ICR7bWVtYmVyfWAsIG5ld3ZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHZhbHVlOiBUO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbWVtYmVyLCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFByb3BlcnR5U3B5IGdldCAke21lbWJlcn1gLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogKHY6IFQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFByb3BlcnR5U3B5IHNldCAke21lbWJlcn1gLCB2KTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufSAqL1xuIl19