"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAccessorDecorator = exports.isMethodDecorator = exports.isParameterDecorator = exports.isPropertyDecorator = exports.isClassDecorator = exports.LogParameterInspector = exports.ParameterInspector = exports.LogMethodInspector = exports.MethodInspector = exports.LogPropertyInspector = exports.PropertyInspector = exports.AccessorSpy = exports.LogAccessorInspector = exports.AccessorInspector = exports.LogClassInspector = exports.ClassInspector = void 0;
var ClassInspector_js_1 = require("./ClassInspector.js");
Object.defineProperty(exports, "ClassInspector", { enumerable: true, get: function () { return ClassInspector_js_1.ClassInspector; } });
Object.defineProperty(exports, "LogClassInspector", { enumerable: true, get: function () { return ClassInspector_js_1.LogClassInspector; } });
var AccessorInspector_js_1 = require("./AccessorInspector.js");
Object.defineProperty(exports, "AccessorInspector", { enumerable: true, get: function () { return AccessorInspector_js_1.AccessorInspector; } });
Object.defineProperty(exports, "LogAccessorInspector", { enumerable: true, get: function () { return AccessorInspector_js_1.LogAccessorInspector; } });
Object.defineProperty(exports, "AccessorSpy", { enumerable: true, get: function () { return AccessorInspector_js_1.AccessorSpy; } });
var PropertyInspector_js_1 = require("./PropertyInspector.js");
Object.defineProperty(exports, "PropertyInspector", { enumerable: true, get: function () { return PropertyInspector_js_1.PropertyInspector; } });
Object.defineProperty(exports, "LogPropertyInspector", { enumerable: true, get: function () { return PropertyInspector_js_1.LogPropertyInspector; } });
var MethodInspector_js_1 = require("./MethodInspector.js");
Object.defineProperty(exports, "MethodInspector", { enumerable: true, get: function () { return MethodInspector_js_1.MethodInspector; } });
Object.defineProperty(exports, "LogMethodInspector", { enumerable: true, get: function () { return MethodInspector_js_1.LogMethodInspector; } });
var ParameterInspector_js_1 = require("./ParameterInspector.js");
Object.defineProperty(exports, "ParameterInspector", { enumerable: true, get: function () { return ParameterInspector_js_1.ParameterInspector; } });
Object.defineProperty(exports, "LogParameterInspector", { enumerable: true, get: function () { return ParameterInspector_js_1.LogParameterInspector; } });
const isset = (val) => {
    return typeof val !== 'undefined' && val !== null;
};
const notset = (val) => {
    return (typeof val === 'undefined') || (val === null);
};
const isClassDecorator = (target, propertyKey, descriptor) => {
    return (isset(target)
        && notset(propertyKey)
        && notset(descriptor));
};
exports.isClassDecorator = isClassDecorator;
const isPropertyDecorator = (target, propertyKey, descriptor) => {
    return (isset(target)
        && isset(propertyKey)
        && notset(descriptor));
};
exports.isPropertyDecorator = isPropertyDecorator;
const isParameterDecorator = (target, propertyKey, descriptor) => {
    return (isset(target)
        && isset(propertyKey)
        && isset(descriptor)
        && typeof descriptor === 'number');
};
exports.isParameterDecorator = isParameterDecorator;
const isMethodDecorator = (target, propertyKey, descriptor) => {
    if ((isset(target)
        && isset(propertyKey)
        && isset(descriptor)
        && typeof descriptor === 'object')) {
        const propdesc = descriptor;
        return (typeof propdesc.value === 'function');
    }
    else {
        return false;
    }
};
exports.isMethodDecorator = isMethodDecorator;
const isAccessorDecorator = (target, propertyKey, descriptor) => {
    if ((isset(target)
        && isset(propertyKey)
        && isset(descriptor)
        && typeof descriptor === 'object')) {
        const propdesc = descriptor;
        return (typeof propdesc.value !== 'function')
            && (typeof propdesc.get === 'function'
                || typeof propdesc.set === 'function');
    }
    else {
        return false;
    }
};
exports.isAccessorDecorator = isAccessorDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EseURBRTZCO0FBRHpCLG1IQUFBLGNBQWMsT0FBQTtBQUFFLHNIQUFBLGlCQUFpQixPQUFBO0FBR3JDLCtEQUdnQztBQUY1Qix5SEFBQSxpQkFBaUIsT0FBQTtBQUFFLDRIQUFBLG9CQUFvQixPQUFBO0FBQ3ZDLG1IQUFBLFdBQVcsT0FBQTtBQUdmLCtEQUdnQztBQUY1Qix5SEFBQSxpQkFBaUIsT0FBQTtBQUFFLDRIQUFBLG9CQUFvQixPQUFBO0FBSTNDLDJEQUU4QjtBQUQxQixxSEFBQSxlQUFlLE9BQUE7QUFBRSx3SEFBQSxrQkFBa0IsT0FBQTtBQUd2QyxpRUFFaUM7QUFEN0IsMkhBQUEsa0JBQWtCLE9BQUE7QUFBRSw4SEFBQSxxQkFBcUIsT0FBQTtBQUk3QyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFO0lBQ2xCLE9BQU8sT0FBTyxHQUFHLEtBQUssV0FBVyxJQUFJLEdBQUcsS0FBSyxJQUFJLENBQUM7QUFDdEQsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRTtJQUNuQixPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7QUFDMUQsQ0FBQyxDQUFDO0FBRUssTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLE1BQWMsRUFDM0MsV0FBNkIsRUFDN0IsVUFBd0MsRUFBRSxFQUFFO0lBRTVDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1dBQ2IsTUFBTSxDQUFDLFdBQVcsQ0FBQztXQUNuQixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUNoQyxDQUFDLENBQUM7QUFQVyxRQUFBLGdCQUFnQixvQkFPM0I7QUFFSyxNQUFNLG1CQUFtQixHQUFHLENBQUMsTUFBYyxFQUM5QyxXQUE2QixFQUM3QixVQUF3QyxFQUFFLEVBQUU7SUFFNUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7V0FDYixLQUFLLENBQUMsV0FBVyxDQUFDO1dBQ2xCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLENBQUMsQ0FBQztBQVBXLFFBQUEsbUJBQW1CLHVCQU85QjtBQUVLLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxNQUFjLEVBQy9DLFdBQTZCLEVBQzdCLFVBQXdDLEVBQUUsRUFBRTtJQUU1QyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztXQUNiLEtBQUssQ0FBQyxXQUFXLENBQUM7V0FDbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQztXQUNqQixPQUFPLFVBQVUsS0FBSyxRQUFRLENBQUMsQ0FBQztBQUM1QyxDQUFDLENBQUM7QUFSVyxRQUFBLG9CQUFvQix3QkFRL0I7QUFFSyxNQUFNLGlCQUFpQixHQUFHLENBQUMsTUFBYyxFQUM1QyxXQUE2QixFQUM3QixVQUF3QyxFQUFFLEVBQUU7SUFFNUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7V0FDZCxLQUFLLENBQUMsV0FBVyxDQUFDO1dBQ2xCLEtBQUssQ0FBQyxVQUFVLENBQUM7V0FDakIsT0FBTyxVQUFVLEtBQUssUUFBUSxDQUFDLEVBQUU7UUFDakMsTUFBTSxRQUFRLEdBQXVCLFVBQVUsQ0FBQztRQUNoRCxPQUFPLENBQUMsT0FBTyxRQUFRLENBQUMsS0FBSyxLQUFLLFVBQVUsQ0FBQyxDQUFDO0tBQ2pEO1NBQU07UUFDSCxPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNMLENBQUMsQ0FBQTtBQWJZLFFBQUEsaUJBQWlCLHFCQWE3QjtBQUVNLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxNQUFjLEVBQzlDLFdBQTZCLEVBQzdCLFVBQXdDLEVBQUUsRUFBRTtJQUU1QyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztXQUNkLEtBQUssQ0FBQyxXQUFXLENBQUM7V0FDbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQztXQUNqQixPQUFPLFVBQVUsS0FBSyxRQUFRLENBQUMsRUFBRTtRQUNqQyxNQUFNLFFBQVEsR0FBdUIsVUFBVSxDQUFDO1FBQ2hELE9BQU8sQ0FBQyxPQUFPLFFBQVEsQ0FBQyxLQUFLLEtBQUssVUFBVSxDQUFDO2VBQ3pDLENBQUMsT0FBTyxRQUFRLENBQUMsR0FBRyxLQUFLLFVBQVU7bUJBQ2xDLE9BQU8sUUFBUSxDQUFDLEdBQUcsS0FBSyxVQUFVLENBQUMsQ0FBQztLQUM1QztTQUFNO1FBQ0gsT0FBTyxLQUFLLENBQUM7S0FDaEI7QUFDTCxDQUFDLENBQUE7QUFmWSxRQUFBLG1CQUFtQix1QkFlL0IiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCB7XG4gICAgQ2xhc3NJbnNwZWN0b3IsIExvZ0NsYXNzSW5zcGVjdG9yXG59IGZyb20gJy4vQ2xhc3NJbnNwZWN0b3IuanMnO1xuXG5leHBvcnQge1xuICAgIEFjY2Vzc29ySW5zcGVjdG9yLCBMb2dBY2Nlc3Nvckluc3BlY3RvcixcbiAgICBBY2Nlc3NvclNweVxufSBmcm9tICcuL0FjY2Vzc29ySW5zcGVjdG9yLmpzJztcblxuZXhwb3J0IHtcbiAgICBQcm9wZXJ0eUluc3BlY3RvciwgTG9nUHJvcGVydHlJbnNwZWN0b3IsXG4gICAgLy8gUHJvcGVydHlTcHlcbn0gZnJvbSAnLi9Qcm9wZXJ0eUluc3BlY3Rvci5qcyc7XG5cbmV4cG9ydCB7XG4gICAgTWV0aG9kSW5zcGVjdG9yLCBMb2dNZXRob2RJbnNwZWN0b3Jcbn0gZnJvbSAnLi9NZXRob2RJbnNwZWN0b3IuanMnO1xuXG5leHBvcnQge1xuICAgIFBhcmFtZXRlckluc3BlY3RvciwgTG9nUGFyYW1ldGVySW5zcGVjdG9yXG59IGZyb20gJy4vUGFyYW1ldGVySW5zcGVjdG9yLmpzJztcblxuXG5jb25zdCBpc3NldCA9ICh2YWwpID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsICE9PSBudWxsO1xufTtcbmNvbnN0IG5vdHNldCA9ICh2YWwpID0+IHtcbiAgICByZXR1cm4gKHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB8fCAodmFsID09PSBudWxsKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc0NsYXNzRGVjb3JhdG9yID0gKHRhcmdldDogT2JqZWN0LFxuICAgIHByb3BlcnR5S2V5Pzogc3RyaW5nIHwgc3ltYm9sLFxuICAgIGRlc2NyaXB0b3I/OiBudW1iZXIgfCBQcm9wZXJ0eURlc2NyaXB0b3IpID0+IHtcblxuICAgIHJldHVybiAoaXNzZXQodGFyZ2V0KVxuICAgICAgICAgJiYgbm90c2V0KHByb3BlcnR5S2V5KVxuICAgICAgICAgJiYgbm90c2V0KGRlc2NyaXB0b3IpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1Byb3BlcnR5RGVjb3JhdG9yID0gKHRhcmdldDogT2JqZWN0LFxuICAgIHByb3BlcnR5S2V5Pzogc3RyaW5nIHwgc3ltYm9sLFxuICAgIGRlc2NyaXB0b3I/OiBudW1iZXIgfCBQcm9wZXJ0eURlc2NyaXB0b3IpID0+IHtcblxuICAgIHJldHVybiAoaXNzZXQodGFyZ2V0KVxuICAgICAgICAgJiYgaXNzZXQocHJvcGVydHlLZXkpXG4gICAgICAgICAmJiBub3RzZXQoZGVzY3JpcHRvcikpO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzUGFyYW1ldGVyRGVjb3JhdG9yID0gKHRhcmdldDogT2JqZWN0LFxuICAgIHByb3BlcnR5S2V5Pzogc3RyaW5nIHwgc3ltYm9sLFxuICAgIGRlc2NyaXB0b3I/OiBudW1iZXIgfCBQcm9wZXJ0eURlc2NyaXB0b3IpID0+IHtcblxuICAgIHJldHVybiAoaXNzZXQodGFyZ2V0KVxuICAgICAgICAgJiYgaXNzZXQocHJvcGVydHlLZXkpXG4gICAgICAgICAmJiBpc3NldChkZXNjcmlwdG9yKVxuICAgICAgICAgJiYgdHlwZW9mIGRlc2NyaXB0b3IgPT09ICdudW1iZXInKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc01ldGhvZERlY29yYXRvciA9ICh0YXJnZXQ6IE9iamVjdCxcbiAgICBwcm9wZXJ0eUtleT86IHN0cmluZyB8IHN5bWJvbCxcbiAgICBkZXNjcmlwdG9yPzogbnVtYmVyIHwgUHJvcGVydHlEZXNjcmlwdG9yKSA9PiB7XG5cbiAgICBpZiAoKGlzc2V0KHRhcmdldClcbiAgICAgJiYgaXNzZXQocHJvcGVydHlLZXkpXG4gICAgICYmIGlzc2V0KGRlc2NyaXB0b3IpXG4gICAgICYmIHR5cGVvZiBkZXNjcmlwdG9yID09PSAnb2JqZWN0JykpIHtcbiAgICAgICAgY29uc3QgcHJvcGRlc2MgPSA8UHJvcGVydHlEZXNjcmlwdG9yPmRlc2NyaXB0b3I7XG4gICAgICAgIHJldHVybiAodHlwZW9mIHByb3BkZXNjLnZhbHVlID09PSAnZnVuY3Rpb24nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgaXNBY2Nlc3NvckRlY29yYXRvciA9ICh0YXJnZXQ6IE9iamVjdCxcbiAgICBwcm9wZXJ0eUtleT86IHN0cmluZyB8IHN5bWJvbCxcbiAgICBkZXNjcmlwdG9yPzogbnVtYmVyIHwgUHJvcGVydHlEZXNjcmlwdG9yKSA9PiB7XG5cbiAgICBpZiAoKGlzc2V0KHRhcmdldClcbiAgICAgJiYgaXNzZXQocHJvcGVydHlLZXkpXG4gICAgICYmIGlzc2V0KGRlc2NyaXB0b3IpXG4gICAgICYmIHR5cGVvZiBkZXNjcmlwdG9yID09PSAnb2JqZWN0JykpIHtcbiAgICAgICAgY29uc3QgcHJvcGRlc2MgPSA8UHJvcGVydHlEZXNjcmlwdG9yPmRlc2NyaXB0b3I7XG4gICAgICAgIHJldHVybiAodHlwZW9mIHByb3BkZXNjLnZhbHVlICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgJiYgKHR5cGVvZiBwcm9wZGVzYy5nZXQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICB8fCB0eXBlb2YgcHJvcGRlc2Muc2V0ID09PSAnZnVuY3Rpb24nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIl19