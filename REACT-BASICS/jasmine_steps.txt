jasmine - javascript testing framewokr
 jest - developed by facebook, 
	- has built supporting ofr mocking and assertions
	- faster 
	- complex testing  
jasmine - opensource , you need external libraries to testing modules

src - hello.ts -  hello.tsx
test file - hello.spec.ts(jasmine) - (jest-hello.test.ts)
	    hello.spec.tsx(jasmine) - (jest-hello.test.tsx)



1. Create a directory
	mkdir ts-jasmine-demo
	cd ts-jasmine-demo
2. Initialize npm Project
	npm init
3. Install TypeScript, Jasmine, and Jasmine types Packages
	npm i --save-dev typescript jasmine @types/jasmine
4. Initialize Project for Typescript Usage
	npx tsc --init
	This will create a tsconfig.json file.

	Update outDir in tsconfig.json
	- // "outDir": "./",   /* Specify an output folder for all emitted files. */
	+ "outDir": "./build", /* Specify an output folder for all emitted files. */
	This ensures that built files don't pollute your workspace.

	Add build command to package.json
	{
  		"name": "ts-jasmine-demo",
  		"version": "1.0.0",
  		"description": "",
  		"main": "index.js",
  		"scripts": {
		+   "build": "tsc",
  		},
 		"author": "",
		"license": "ISC",
  		"devDependencies": {
  			  "@types/jasmine": "^4.3.0",
    			  "jasmine": "^4.4.0",
    			  "typescript": "^4.8.4"
  		}
	}
5. Initialize Jasmine
	npx jasmine init
	This creates a file at spec/support/jasmine.json, make the following changes:

	{
		- "spec_dir": "spec",
		+ "spec_dir": "build", // This tells jasmine to look in the build folder for the 		tests
  			"spec_files": [
    				"**/*[sS]pec.?(m)js"
  			],
  		"helpers": [
    			"helpers/**/*.?(m)js"
  			],
  		"env": {
    			"stopSpecOnExpectationFailure": false,
    			"random": true
  		}
	}
6. Add test script to package.json
	{
  		"name": "ts-jasmine-demo",
  		"version": "1.0.0",
  		"description": "",
  		"main": "index.js",
  		"scripts": {
    			"build": "tsc",
		+   "test": "jasmine",
  	},
  		"author": "",
  		"license": "ISC",
  		"devDependencies": {
    			"@types/jasmine": "^4.3.0",
    			"jasmine": "^4.4.0",
    			"typescript": "^4.8.4"
  		}
	}

6. Create Simple TypeScript Function
	// src/add.ts
	export function add(a: number, b: number) {
  		return a + b;
	}
7. Create Simple TypeScript Jasmine Spec
	// src/spec/add.spec.ts
	import { add } from "./add";

	describe("add", () => {
  		it("should add two numbers", () => {
    			expect(add(1, 2)).toBe(3);
  		});
	});
8. Run build Script
	npm run build
9. Run test Script
	npm test




//
val e = new Employee("Gowtham", "gowtham@gmail.com");

//mock 
creating fake empl Obj
val e = jasmine.mock(e)
expect(e.name).toEqual("Gowtham")

//spy
creating real empl obj
val e = jasmine.createSpy(Employee) //Employee e = new Employee("XXX", "XXX");
expect(e.name).toEqual("Gowtham")


//testing 

//define the class / obj - Arrange

//make the object to work, fn call- Action

//comparing the results - Assertion


